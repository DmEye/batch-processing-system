using System;
using System.Windows.Forms;

namespace Practic6
{
    public partial class Form1 : Form
    {
        private int N, k, l, m, v, b, d;

        private int count = 0, iter = 0;
        private bool CPU, HDD, NET;
        private int cCPU, cHDD, cNET;
        private Random rnd = new Random();
        private ProcessData[] processData;

        private void modelingB_Click(object sender, EventArgs e)
        {
            N = (int)nNumeric.Value;
            k = (int)kNumeric.Value;
            l = (int)lNumeric.Value;
            m = (int)mNumeric.Value;
            v = (int)vNumeric.Value;
            b = (int)bNumeric.Value;
            d = (int)dNumeric.Value;
            CPU = true; cCPU = 0;
            HDD = true; cHDD = 0;
            NET = true; cNET = 0;
            processData = new ProcessData[N];
            for (int i = 0; i < N; i++)
            {
                processData[i] = new ProcessData();
                processData[i].name = i.ToString();
                processData[i].tCPU = k + rnd.Next(-l, l);
                processData[i].tHDD = m + rnd.Next(-v, v);
                processData[i].tNET = b + rnd.Next(-d, d);
                processData[i].step = 0;
                processData[i].precessedCPU = false;
                processData[i].precessedHDD = false;
                processData[i].precessedNET = false;
                processData[i].bussy = false;
            }
            while (count < N)
            {

                /*sortBy(ref processData, 1);
                if (CPU)
                {
                    CPU = false;
                    for (int i = cCPU; i < N; i++)
                    {
                        if (processData[i].step == 0 && !processData[i].bussy)
                        {
                            listBox.Items.Add(processData[i].ToString() + " итерация №" + iter);
                            processData[i].step = 1; // Отправляем на жёсткий диск
                            processData[i].bussy = true;
                            cCPU++;
                            break;
                        }
                    }
                    continue;
                }
                sortBy(ref processData, 2);
                if (HDD)
                {
                    HDD = false;
                    for (int i = cHDD; i < N; i++)
                    {
                        if (processData[i].step == 1 && !processData[i].bussy)
                        {
                            listBox.Items.Add(processData[i].ToString() + " итерация №" + iter);
                            processData[i].step = 2; // Отправляем на сеть
                            cHDD++;
                            processData[i].bussy = true;
                            break;
                        }
                    }
                    continue;
                }
                sortBy(ref processData, 3);
                if (NET)
                {
                    NET = false;
                    for (int i = cNET; i < N; i++)
                    {
                        if (processData[i].step == 2 && !processData[i].bussy)
                        {
                            listBox.Items.Add(processData[i].ToString() + " итерация №" + iter);
                            processData[i].step = 3; // Задача выполнена
                            cNET++;
                            processData[i].bussy = true;
                            count++;
                            break;
                        }
                    }
                    continue;
                }
                CPU = true;
                HDD = true;
                NET = true;
                for (int i = 0; i < processData.Length; i++)
                {
                    if (processData[i].bussy && processData[i].step != 3)
                        processData[i].bussy = false;
                }
                iter++;*/
            }
        }


        public Form1()
        {
            InitializeComponent();
        }

        private void sortBy(ref ProcessData[] data, byte param)
        {
            ProcessData temp;
            if (param == 1)
            {
                for (int i = 0; i < data.Length; i++)
                {
                    for (int j = i; j < data.Length; j++)
                    {
                        if (data[i].tCPU < data[j].tCPU)
                        {
                            temp = data[i];
                            data[i] = data[j];
                            data[j] = temp;
                        }
                    }
                }
            }
            else if (param == 2)
            {
                for (int i = 0; i < data.Length; i++)
                {
                    for (int j = i; j < data.Length; j++)
                    {
                        if (data[i].tHDD < data[j].tHDD)
                        {
                            temp = data[i];
                            data[i] = data[j];
                            data[j] = temp;
                        }
                    }
                }
            }
            else
            {
                for (int i = 0; i < data.Length; i++)
                {
                    for (int j = i; j < data.Length; j++)
                    {
                        if (data[i].tNET < data[j].tNET)
                        {
                            temp = data[i];
                            data[i] = data[j];
                            data[j] = temp;
                        }
                    }
                }
            }
        }
    }

    struct ProcessData
    {
        public int tCPU;
        public int tHDD;
        public int tNET;
        public int step;
        public string name;
        public bool precessedCPU;
        public bool precessedHDD;
        public bool precessedNET;
        public bool bussy;

        public override string ToString()
        {
            return "Имя: " + name + "; CPU: " + tCPU.ToString() + "; HDD: " + tHDD.ToString() + "; NET: " + tNET.ToString();
        }
    }
}
